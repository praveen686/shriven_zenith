================================================================================
                    SHRIVEN ZENITH CODE COVERAGE ANALYSIS
================================================================================
Generated: 2025-09-01
Build: Clang 18 with LLVM Coverage Tools
================================================================================

EXECUTIVE SUMMARY
-----------------
Overall Coverage: 61.95% lines covered (350/565)
                 63.64% functions covered (49/77)
                 
Quality Rating: MODERATE - Significant gaps in critical components

================================================================================

COMPONENT BREAKDOWN
-------------------

┌─────────────────────┬──────────┬───────────┬──────────┬─────────────────┐
│ Component           │ Lines    │ Functions │ Branches │ Status          │
├─────────────────────┼──────────┼───────────┼──────────┼─────────────────┤
│ logging.h           │  88.37%  │  100.00%  │  81.25%  │ ✅ EXCELLENT    │
│ mem_pool.h          │  73.00%  │   86.21%  │  69.39%  │ ✅ GOOD         │
│ macros.h            │  30.00%  │   50.00%  │  50.00%  │ ⚠️  LOW         │
│ time_utils.h        │   2.50%  │    4.17%  │    N/A   │ ❌ CRITICAL     │
│ lf_queue.h          │   0.00%  │    0.00%  │    0.00% │ ⏳ TIMEOUT      │
│ thread_utils.h      │   0.00%  │    0.00%  │    0.00% │ ⏳ TIMEOUT      │
│ types.h             │   0.00%  │    0.00%  │    0.00% │ 🚫 NOT TESTED   │
└─────────────────────┴──────────┴───────────┴──────────┴─────────────────┘

================================================================================

DETAILED ANALYSIS BY COMPONENT
-------------------------------

1. LOGGING SYSTEM (logging.h) - EXCELLENT COVERAGE
   ================================================
   Lines Covered:     152 of 172 (88.37%)
   Functions Covered: 22 of 22 (100.00%)
   
   Missing Coverage:
   - Error handling paths in extreme conditions
   - Some edge cases in buffer overflow scenarios
   
   Recommendation: Add negative test cases

2. MEMORY POOL (mem_pool.h) - GOOD COVERAGE
   =========================================
   Lines Covered:     192 of 263 (73.00%)
   Functions Covered: 25 of 29 (86.21%)
   
   Missing Coverage:
   - Double-free protection edge cases
   - NUMA allocation failure paths
   - Some ZeroPolicy branches
   
   Recommendation: Add stress tests for edge conditions

3. MACRO UTILITIES (macros.h) - LOW COVERAGE
   ==========================================
   Lines Covered:     3 of 10 (30.00%)
   Functions Covered: 1 of 2 (50.00%)
   
   Missing Coverage:
   - UNLIKELY path testing
   - Debug-only macro paths
   
   Recommendation: Create macro-specific unit tests

4. TIME UTILITIES (time_utils.h) - CRITICAL GAP
   =============================================
   Lines Covered:     3 of 120 (2.50%)
   Functions Covered: 1 of 24 (4.17%)
   
   Missing Coverage:
   - Almost all timing functions untested
   - getCycles() not exercised
   - nanosSince() not covered
   
   Recommendation: URGENT - Add comprehensive timing tests

5. LOCK-FREE QUEUE (lf_queue.h) - TEST TIMEOUT
   ============================================
   Coverage: 0% - Tests timed out during execution
   
   Issue: Multi-threaded stress tests exceeded timeout
   
   Recommendation: Reduce test iterations or increase timeout

6. THREAD UTILITIES (thread_utils.h) - TEST TIMEOUT
   =================================================
   Coverage: 0% - Tests timed out during execution
   
   Issue: ThreadPool tests exceeded execution limit
   
   Recommendation: Optimize test scenarios

================================================================================

TEST EXECUTION RESULTS
----------------------

┌──────────────────────┬──────────┬─────────────────────────────────┐
│ Test Suite           │ Status   │ Notes                           │
├──────────────────────┼──────────┼─────────────────────────────────┤
│ test_mem_pool        │ ✅ PASS  │ All 6 tests successful          │
│ test_zero_policy     │ ✅ PASS  │ All 7 tests successful          │
│ test_logger          │ ❌ FAIL  │ 6/7 failed (latency issues)     │
│ test_lf_queue        │ ⏳ TIME  │ Exceeded 10 second timeout      │
│ test_thread_utils    │ ⏳ TIME  │ Exceeded 10 second timeout      │
└──────────────────────┴──────────┴─────────────────────────────────┘

================================================================================

COVERAGE GAPS - PRIORITY ORDER
-------------------------------

CRITICAL (Fix Immediately):
1. time_utils.h - Only 2.50% covered
   → Add tests for: getCycles(), nanosSince(), rdtsc()
   
2. Test timeouts preventing coverage measurement
   → Fix: test_lf_queue, test_thread_utils timeout issues

HIGH (Fix This Week):
3. macros.h - Only 30% covered
   → Add tests for: UNLIKELY paths, debug macros
   
4. mem_pool.h branch coverage at 69%
   → Add tests for: error conditions, edge cases

MEDIUM (Fix This Sprint):
5. logging.h missing 12% line coverage
   → Add tests for: buffer overflow, extreme conditions

================================================================================

COVERAGE TRENDS & TARGETS
-------------------------

Current State:
├── Overall:    61.95% ⚠️  (Target: 80%)
├── Functions:  63.64% ⚠️  (Target: 85%)
└── Branches:   72.97% 🔶 (Target: 75%)

Required Improvements:
- Need +18.05% line coverage to meet target
- Need +21.36% function coverage to meet target
- Branch coverage close to target (need +2.03%)

================================================================================

ACTION ITEMS
------------

□ IMMEDIATE (Today):
  ├── Fix test_lf_queue timeout issue
  ├── Fix test_thread_utils timeout issue
  └── Add basic time_utils.h tests

□ SHORT TERM (This Week):
  ├── Achieve 80% coverage for time_utils.h
  ├── Improve macros.h coverage to 70%
  └── Fix failing logger tests

□ MEDIUM TERM (This Sprint):
  ├── Reach 80% overall line coverage
  ├── Integrate coverage into CI/CD pipeline
  └── Set up coverage trend tracking

□ LONG TERM (This Quarter):
  ├── Achieve 85% function coverage
  ├── Implement coverage quality gates
  └── Document coverage requirements

================================================================================

COMMANDS FOR COVERAGE GENERATION
---------------------------------

Build with coverage:
  ./scripts/build_coverage.sh

Run tests with coverage:
  cd cmake/build-coverage
  ./tests/test_mem_pool
  ./tests/test_zero_policy
  ./tests/test_logger
  ./tests/test_lf_queue
  ./tests/test_thread_utils

Generate reports:
  llvm-profdata merge -sparse *.profraw -o coverage.profdata
  llvm-cov report ./tests/test_* -instr-profile=coverage.profdata
  llvm-cov show ./tests/test_* -instr-profile=coverage.profdata -format=html

================================================================================
                              END OF REPORT
================================================================================